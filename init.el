;;; package -- Summary
;;;
;;; Commentary:
;;; This is my init.el.  I put this here to make Flycheck shut up.

;;; Code:

;; Ignore stuff.  This is autogenerated.
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(custom-safe-themes
   (quote
    ("a8245b7cc985a0610d71f9852e9f2767ad1b852c2bdea6f4aadc12cce9c4d6d0" "3c83b3676d796422704082049fc38b6966bcad960f896669dfc21a7a37a748fa" "c74e83f8aa4c78a121b52146eadb792c9facc5b1f02c917e3dbb454fca931223" "a27c00821ccfd5a78b01e4f35dc056706dd9ede09a8b90c6955ae6a390eb1c1e" "d677ef584c6dfc0697901a44b885cc18e206f05114c8a3b7fde674fce6180879" "cdbd0a803de328a4986659d799659939d13ec01da1f482d838b68038c1bb35e8" "8aebf25556399b58091e533e455dd50a6a9cba958cc4ebb0aab175863c25b9a4" default)))
 '(epa-pinentry-mode nil)
 '(flyspell-delay 0.5)
 '(haskell-mode-hook
   (quote
    (haskell-decl-scan-mode haskell-indentation-mode highlight-uses-mode imenu-add-menubar-index interactive-haskell-mode turn-on-haskell-unicode-input-method)))
 '(haskell-process-auto-import-loaded-modules t)
 '(haskell-process-log t)
 '(haskell-process-suggest-remove-import-lines t)
 '(haskell-stylish-on-save t)
 '(haskell-tags-on-save t)
 '(initial-frame-alist (quote ((fullscreen . maximized))))
 ; '(magit-commit-arguments (quote ("--gpg-sign=BAA2F70290B90EB87F923C38C71FE7F2B22B57F5")))
 '(package-selected-packages
   (quote
    (zig-mode flycheck-mix flycheck-elixir flycheck-dialyxir flycheck-credo alchemist haskell-mode clang-format projectile helm-rtags company-rtags json-navigator smex helm-idris pinentry markdown-toc markdown-mode+ flymd pass color-theme-sanityinc-solarized yasnippet irony-eldoc foggy-night-theme darktooth-theme badger-theme alect-themes twilight-bright-theme tango-plus-theme soft-morning-theme punpun-theme planet-theme plan9-theme pastelmac-theme paper-theme leuven-theme eziam-theme lenlen-theme iodine-theme greymatters-theme eink-theme pomidor treemacs smartparens racket-mode borland-blue-theme protobuf-mode flycheck-bashate flycheck-demjsonlint json-mode yaml-mode glsl-mode logstash-conf magit-gh-pulls kubernetes ensime helm-circe circe flycheck-irony company-irony-c-headers company-irony rtags cmake-ide cmake-mode groovy-mode smart-mode-line ponylang-mode flycheck-pony go-add-tags go-impl visual-regexp-steroids visual-regexp toml-mode helm-cider emacsql-mysql company-anaconda pydoc pyenv-mode python-mode py-yapf py-autopep8 spray ereader helm-pass org-bullets birds-of-paradise-plus-theme bookmark+ elfeed-org elfeed rainbow-blocks all-the-icons-dired ido-ubiquitous ido-yes-or-no ido-hacks f3 all-the-icons ripgrep rg rainbow-mode geiser paredit-menu paredit focus flyspell-lazy ace-flyspell vdiff dockerfile-mode pdf-tools latex-preview-pane company-math julia-shell ess nim-mode flycheck-nim idris-mode company-tern company-flow gotest ac-js2 eslint-fix color-theme-sanityinc-tomorrow zenburn-theme vue-mode undo-tree rats rainbow-delimiters racer mocha markdown-mode magit linum-relative goto-last-change go-rename go-guru go-eldoc go-dlv go-direx flycheck-rust flycheck-gometalinter flycheck-flow company-go cargo ack)))
 '(safe-local-variable-values (quote ((clang-format-on-save . t)))))


;; MELPA
(require 'package)
(add-to-list 'package-archives
	     '("melpa" . "http://melpa.org/packages/") t)

(package-initialize)

;;; Light Themes
;; Very Bright
; (load-theme 'twilight-bright t)
; (load-theme 'sanityinc-tomorrow-day t) ; I likey
; (load-theme 'sanityinc-solarized-light t) ; Classic
; (load-theme 'pastelmac t)              ; Meh
; (load-theme 'leuven t)                 ; Pretty cool, quietly colorful
; (load-theme 'paper t)                  ; Pretty cool, rather quiet
; (load-theme 'iodine t)                 ; Not a fan
; (load-theme 'tango-plus t)             ; Not bad
; (load-theme 'soft-morning t)           ; Schizophrenic
; (load-theme 'eink t)                   ; Beautifully quiet
;; Muted

;;; Colorful Themes
;; Exciting
; (load-theme 'borland-blue t)
; (load-theme 'sanityinc-tomorrow-blue t)
; (load-theme 'plan9 t)
;; Conservative

;;; Dark Themes
;; Very Bold
; (load-theme 'sanityinc-tomorrow-bright t)
; (load-theme 'sanityinc-tomorrow-night t)
; (load-theme 'sanityinc-tomorrow-eighties t) ; Somewhat rowdy but dark
; (load-theme 'birds-of-paradise-plus t)    ; Very contemplative
; (load-theme 'zenburn t)
;; (defvar zenburn-override-colors-alist ; Darker Zenburn background
;;   '(("zenburn-bg" . "#202020")))
;; (load-theme 'zenburn t)
(load-theme 'darktooth t) ; Nice dark variant on B's of P Dark
; (load-theme 'sanityinc-solarized-dark t)
; (load-theme 'planet t) ; Nice clean / industrial feel
; (load-theme 'foggy-night t) ; Great low-contrast theme
;; Depressing

;; Start in fullscreen
(defun my-fullscreen-hook ()
  "A hook which gets called after window setup."
  (custom-set-variables
    '(initial-frame-alist (quote ((fullscreen . maximized)))))
  (set-frame-parameter nil 'fullscreen 'fullboth)
  (tool-bar-mode -1)
)

(add-hook 'window-setup-hook 'my-fullscreen-hook)

;; Use whitespace mode to highlight lines extending beyond 72 columns.
(setq whitespace-line-column 72)
(setq whitespace-style '(face empty lines-tail trailing))
(global-whitespace-mode t)

;; Use relative line numbers
(linum-relative-mode)
(setq linum-relative-current-symbol "")
(ruler-mode 1)

;; Set up fonts.
(set-face-attribute 'default nil
		    :foundry "apple"
		    :family  "Go Mono"
		    :height  95
		    :weight  'light)

;; scroll one line at a time (less "jumpy" than defaults)
(setq mouse-wheel-scroll-amount '(2 ((shift) . 5))) ;; one line at a time
(setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling
(setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse

;; Undo tree
(undo-tree-mode)

(setq-default indent-tabs-mode nil)

;; Smex init
(smex-initialize)
(global-set-key (kbd "M-x") 'smex)
(global-set-key (kbd "M-X") 'smex-major-mode-commands)
;; This is your old M-x.
(global-set-key (kbd "C-c C-c M-x") 'execute-extended-command)

;; Don't use "smart tabs" (?)
(setq-default indent-tabs-mode nil)

;; Turn on smart-mode-line https://github.com/Malabarba/smart-mode-line
(sml/setup)
(setq sml/theme 'respectful)

;; Custom SML config
;; (setq sml/theme 'automatic
;;       sml/mode-width 'full
;;       sml/name-width '(0 . 20)
;;       sml/replacer-regexp-list
;;       '(("^~/org/" ":O:")
;;         ("^~/\\.emacs\\.d/" ":ED:")))

;; Use Emacs ls emulation since native ls does not support --dired
(setq ls-lisp-use-insert-directory-program nil)
(require 'ls-lisp)
(add-hook 'dired-mode-hook 'all-the-icons-dired-mode)

(setenv "INSIDE_EMACS" (format "%s,comint" emacs-version))
; This is necessary because we want to use Emacs' internal pinentry.
; https://www.masteringemacs.org/article/keeping-secrets-in-emacs-gnupg-auth-sources
; (setenv "GPG_AGENT_INFO" nil)
(pinentry-start)
; (setq epg-gpg-program "gpg2")

(defun my-prog-mode-hook ()
  "Turn this stuff on for all prog modes."

  ;; linum-relative-mode
  (linum-relative-mode)
  (setq linum-relative-current-symbol "")

  ;; Rainbow delimiters
  (rainbow-delimiters-mode)

  ;; Ruler mode
  (ruler-mode 1)
  ;; Undo tree
  (undo-tree-mode)
)

;; And turn it on of course.
(add-hook 'prog-mode-hook 'my-prog-mode-hook)

;; Go setup
(defun my-go-mode-hook ()
  "Add this stuff to go-mode."
  ;; go-eldoc
  (go-eldoc-setup)
  ;; Use goimports instead of gofmt
  (setq gofmt-command "goimports")
  ;; Use smart tabs
  (setq indent-tabs-mode t)
  ;; gofmt-before-save
  (add-hook 'before-save-hook 'gofmt-before-save)
  ;; Go Guru identifier highlighting
  (go-guru-hl-identifier-mode)
  ;; Godef jump / return hotkeys
  (local-set-key (kbd "M-.") 'godef-jump)
  (local-set-key (kbd "<s-mouse-1>") 'godef-jump)
  (local-set-key (kbd "M-,") 'pop-tag-mark)
  ;; Use company-go
  (company-mode)
  (setq company-backends '(company-go))
  ;; Compile and test
  (if (not (string-match "go" compile-command))
    (set (make-local-variable 'compile-command)
         (concat "go generate ./... && "
		 "go test --coverprofile=cover.out -check.vv && "
		 "go build ./...")))
  (local-set-key (kbd "C-x c") 'compile)
  ;; Minimap
  ; (minimap-mode)
)

;; Bind my Go setup to go-mode-hook
(add-hook 'go-mode-hook 'my-go-mode-hook)

(defun my-asm-mode-hook ()
  "This is documented at https://github.com/klauspost/asmfmt/."
  (set (make-local-variable 'gofmt-command) "asmfmt")
  (add-hook 'before-save-hook 'gofmt nil t)
)

(add-hook 'asm-mode-hook 'my-asm-mode-hook)

;; Bind rainbow-delimiters to elisp mode
(defun my-elisp-hook ()
  "My Emacs Lisp config hook."
  (paredit-mode)
)

(add-hook 'emacs-lisp-mode-hook 'my-elisp-hook)

(require 'yaml-mode)
(add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode))

;; Dart stuff
(setq dart-enable-analysis-server t)
(setq dart-format-on-save t)
(add-hook 'dart-mode-hook 'flycheck-mode)

;; ;; Javascript stuff
;; (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))

;; (defun my-vue-mode-hook ()
;;   "My vue-mode config hook."
;;   (linum-relative-mode)
;;   (setq linum-relative-current-symbol "")

;;   (require 'flycheck-flow)
;;   (flycheck-add-next-checker 'javascript-flow 'javascript-eslint)

;;   (ruler-mode 1)

;;   (undo-tree-mode)
;; )

;; (defun my-js2-hook ()
;;   "My js2-mode config hook."
;;   (setq js-indent-level 2)

;;   (setq company-backends '(company-tern company-flow))
;;   (company-mode)

;;   (linum-relative-mode)
;;   (setq linum-relative-current-symbol "")

;;   (ruler-mode 1)

;;   (undo-tree-mode)

;;   (add-hook 'after-save-hook 'eslint-fix nil t)
;;   (require 'flycheck-flow)
;;   (flycheck-add-next-checker 'javascript-flow 'javascript-eslint)
;; )

;; (add-hook 'vue-mode-hook 'my-vue-mode-hook)
;; (add-hook 'js2-mode-hook 'my-js2-hook)

(defun my-json-mode-hook ()
  "My json-mode config hook."
  (require 'flycheck-demjsonlint)
)

(add-hook 'json-mode-hook 'my-json-mode-hook)

(defun my-elixir-mode-hook ()
  "My 'elixir-mode' hook."
  (smartparens-mode)
  (sp-with-modes '(elixir-mode)
    (sp-local-pair "fn" "end"
           :when '(("SPC" "RET"))
           :actions '(insert navigate))
    (sp-local-pair "do" "end"
           :when '(("SPC" "RET"))
           :post-handlers '(sp-ruby-def-post-handler)
           :actions '(insert navigate))
  )
)

;; (add-hook 'elixir-mode 'my-elixir-mode-hook)

;; Nim setup?
(add-hook 'nim-mode-hook 'nimsuggest-mode)
(add-hook 'nimsuggest-mode-hook 'company-mode)
(add-hook 'nimsuggest-mode-hook 'flycheck-mode)

(defun my-rust-mode-hook ()
  "My 'rust-mode' hook."
  (setq indent-tabs-mode t)

  (define-key rust-mode-map (kbd "TAB") #'company-indent-or-complete-common)
  ; (define-key rust-doc-key (kbd "M-?") #'racer-describe)
  (setq company-tooltip-align-annotations t)

  (setq racer-rust-src-path (getenv "RUST_SRC_PATH"))
  (setq racer-cmd (concat (getenv "HOME") "/.cargo/bin/racer"))

  (setq rust-format-on-save t)
)

(add-hook 'flycheck-mode-hook 'flycheck-rust-setup)

(add-hook 'racer-mode-hook #'eldoc-mode)
(add-hook 'racer-mode-hook #'company-mode)

(add-hook 'rust-mode-hook #'racer-mode)

(require 'rust-mode)
(add-hook 'rust-mode-hook 'my-rust-mode-hook)

;; custom text-mode hook
(defun my-text-mode-hook ()
  "My 'text-mode' hook."

  (linum-relative-mode)
  (setq linum-relative-current-symbol "")

  (ruler-mode 1)

  (focus-mode)

  (ace-flyspell-setup)

  ; (require 'flyspell-lazy)
  ; (flyspell-lazy-mode 1)
  (flyspell-mode)

  (undo-tree-mode)
)

(add-hook 'text-mode-hook 'my-text-mode-hook)

(defun my-sh-mode-hook ()
  "My 'sh-mode' custom config hook."
  (require 'flycheck-bashate)
  (flycheck-bashate-setup)
)

(add-hook 'sh-mode-hook 'my-sh-mode-hook)

(require 'yasnippet)
(yas-global-mode 1)

;;;;;;;;;;;;;;;;;;;;;;;;;;
;; C++ Helper Functions ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Always run CMake-IDE setup on EMacs startup just in case.
(cmake-ide-setup)

(defun my-configure-rtags ()
  "Set up RTags to my liking."

  ;; Set defaults and use diagnostics(?)
  (setq rtags-autostart-diagnostics t)
  (rtags-enable-standard-keybindings)

  (setq rtags-completions-enabled t)
)

(defun my-configure-company-cxx ()
  "Set up Company for use with Irony."
  ;; Use the Irony Company backend.
  (add-to-list 'company-backends '(company-irony-c-headers
                                   company-irony))
)

(defun my-irony-mode-hook ()
  "Customize Irony-mode for use with CMake, etc."
  ; Use irony-mode for C++ completions.
  (define-key irony-mode-map [remap completion-at-point]
    'irony-completion-at-point-async)
  (define-key irony-mode-map [remap complete-symbol]
    'irony-completion-at-point-async)

  ; Configure Company to use Irony.
  (company-irony-setup-begin-commands)

  ; Configure Irony compile options using the compilation database.
  (irony-cdb-autosetup-compile-options)

  ; Enable Eldoc integration for Irony.
  (irony-eldoc)
)

;; Turn it on any time we use Irony mode.
(add-hook 'irony-mode-hook 'my-irony-mode-hook)

(defun my-flycheck-cxx-setup ()
  "Set up Flycheck to use RTags overlays."

  ;; Use RTags as the Flycheck checker.
  (require 'flycheck-rtags)
  (flycheck-select-checker 'rtags)

  ; RTags makes better overlays, so disable Flycheck's overlays.
  (setq-local flycheck-highlighting-mode nil)
  (setq-local flycheck-check-syntax-automatically nil)

  ;; Enable Irony integration for flycheck.
  (flycheck-irony-setup)
)

(defun clang-format-buffer-smart ()
  "Reformat buffer if .clang-format exists in the projectile root."
  (when (f-exists? (expand-file-name ".clang-format" projectile-project-root))
    (clang-format-buffer))
)

(defun my-cxx-mode ()
  "My C / C++ config hook."

  ;; Try to enable projectile mode, just in case.
  (projectile-mode)

  ;; Default to use tabs for indentation.
  (setq indent-tabs-mode t)

  ;; Default to K&R style in case there's no .clang-format config file.
  (c-set-style "K&R")

  ;; Enable auto-completion, flycheck linting, and Irony integration.
  (company-mode)
  (flycheck-mode)
  (irony-mode)

  ;; Configure Company, FlyCheck, and Irony.
  (my-configure-rtags)
  (my-configure-company-cxx)
  (my-flycheck-cxx-setup)

  ;; Use the Helm integration for RTags.
  (setq rtags-use-helm t)

  ;; Don't use Semantic for Company completion.
  (setq company-backends (delete 'company-semantic company-backends))

  ;; Clang format on save, if .clang-format file is present.
  (add-hook 'before-save-hook 'clang-format-buffer-smart nil t)

  ;; Set up a few hotkeys:
  ;;
  ;; Jump to / from definition
  (local-set-key (kbd "M-.") 'rtags-find-symbol-at-point)
  (local-set-key (kbd "M-,") 'pop-tag-mark)
  ;; Compile
  (local-set-key (kbd "C-x c") 'cmake-ide-compile)
  ;; Tab-completion.
  (define-key c-mode-map [(tab)] 'company-complete)
  (define-key c++-mode-map [(tab)] 'company-complete)
  ;; Clang format on demand.
  (global-set-key [C-M-tab] 'clang-format-region)
)

(add-hook 'c++-mode-hook 'my-cxx-mode)
(add-hook 'c-mode-hook 'my-cxx-mode)

;; GLSL Mode
(add-to-list 'auto-mode-alist '("\\.glsl\\'" . glsl-mode))
(add-to-list 'auto-mode-alist '("\\.vert\\'" . glsl-mode))
(add-to-list 'auto-mode-alist '("\\.frag\\'" . glsl-mode))
(add-to-list 'auto-mode-alist '("\\.geom\\'" . glsl-mode))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; End of C++ related stuff ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun my-python-mode ()
  "My custom Python mode."
  ; (add-to-list 'flycheck-disabled-checkers 'python-flake8)
  (py-yapf-enable-on-save)
  (anaconda-mode)
  (anaconda-eldoc-mode)
  (add-to-list 'flycheck-disabled-checkers 'python-pylint)
)

(eval-after-load "paredit.el"
   '(require 'paredit-menu))

(require 'org)
(require 'helm-org-rifle)

(defun my-org-mode-hook ()
  "My custom Org-mode hook."
  ; (org-bullets-mode 1)
  (define-key global-map "\C-cl" 'org-store-link)
  (define-key global-map "\C-ca" 'org-agenda)
  (focus-mode)
  (undo-tree-mode)
  (setq org-log-done t)
)

(setq org-agenda-files (list "~/meta/meta/org/meta.org"
                             "~/meta/meta/org/bookmarks.org"))

(add-hook 'org-mode-hook 'my-org-mode-hook)

(defun my-markdown-mode-hook ()
  "My custom Markdown-mode hook."
  (focus-mode)
  (undo-tree-mode)
)

(add-hook 'markdown-mode-hook 'my-markdown-mode-hook)

(setq epg-gpg-program "gpg2")
(require 'helm-pass)

(require 'spray)
(global-set-key (kbd "C-c C-x s") 'spray-mode)

(defun my-ponylang-mode-hook ()
  "My custom ponylang-mode hook."
  (set-variable 'indent-tabs-mode nil)
  (set-variable 'tab-width 2)

  (if (not (string-match "ponyc" compile-command))
    (set (make-local-variable 'compile-command)
         "ponyc"))

  (local-set-key (kbd "C-x c") 'compile)

  (setq flycheck-pony-executable "/usr/local/bin/ponyc")
)

(require 'protobuf-mode)

(defun my-protobuf-mode-hook ()
  "My custom 'protobuf-mode' hook."
  (defconst my-pb-style
    '((c-basic-ffset . 4)
      (indent-tabs-mode . nil)))

  (c-add-style "my-style" my-pb-style t)
)

(add-hook 'protobuf-mode-hook 'my-protobuf-mode-hook)

;; Scheme / Racket stuff
(require 'smartparens-config)
(setq tab-always-indent 'complete)
(add-hook 'scheme-mode-hook 'geiser-mode)

(provide 'init)
;;; init.el ends here
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
